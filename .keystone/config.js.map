{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import 'dotenv/config'\nimport { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { withAuth, session } from './auth';\n\nconst {\n  DB_USER,\n  DB_PASSWORD,\n  DB_HOST,\n  DB_PORT,\n  DB_NAME,\n  S3_BUCKET_NAME: bucketName,\n  S3_REGION: region,\n  S3_ACCESS_KEY_ID: accessKeyId,\n  S3_SECRET_ACCESS_KEY: secretAccessKey,\n} = process.env\n\nexport default withAuth(\n  config({\n    db: {\n      provider: 'mysql',\n      url: `mysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}`\n      // url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n    storage: {\n      my_images: {\n        kind: 's3',\n        type: 'image',\n        bucketName,\n        region,\n        accessKeyId,\n        secretAccessKey,\n        signed: { expiry: 5000 },\n      },\n      my_files: {\n        kind: 's3',\n        type: 'file',\n        bucketName,\n        region,\n        accessKeyId,\n        secretAccessKey,\n        signed: { expiry: 5000 },\n      },\n    },\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  json,\n  file,\n  select,\n  image,\n  integer\n} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n      password: password({ validation: { isRequired: true } }),\n      sessions: relationship({ ref: 'Session.author', many: true }),\n      presets: relationship({ ref: 'Preset.author', many: true }),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n\n  Preset: list({\n    access: allowAll,\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      slug: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      preset_json: json({\n        defaultValue: null,\n        db: { map: 'preset_json' },\n      }),\n      sessions: relationship({ ref: 'Session.presets', many: true }),\n      groups: relationship({ ref: 'Group.presets', many: true, }),\n      contents: relationship({ ref: 'Content.presets', many: true,        ui: {\n        displayMode: 'select',\n        labelField: 'note',\n      }, }),\n      author: relationship({\n        ref: 'User.presets',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n        many: false,\n      }),\n      tags: relationship({\n        ref: 'Tag.presets',\n        many: true,\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name'],\n          inlineEdit: { fields: ['name'] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: ['name'] },\n        },\n      }),\n    },\n  }),\n\n  Content: list({\n    access: allowAll,\n    fields: {\n      note: integer({\n        defaultValue: 0,\n        isOrderable: true,\n        validation: {\n          isRequired: true,\n          min: 1,\n          max: 127\n        },\n      }),\n      presets: relationship({\n        ref: 'Preset.contents', many: true, ui: {\n          displayMode: 'select',\n          labelField: 'title',\n        },\n      }),\n      media: relationship({\n        ref: 'Media.content',\n        ui: {\n          displayMode: 'cards',\n          labelField: 'text',\n          cardFields: ['type', 'text', 'file', 'image', 'url'],\n          inlineEdit: { fields: ['type', 'text', 'file', 'image', 'url'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n\n        many: false,\n      }),\n    }\n  }),\n\n  Group: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      channel: integer({\n        defaultValue: 0,\n        isOrderable: true,\n        validation: {\n          isRequired: true,\n          min: 1,\n          max: 16\n        },\n      }),\n      presets: relationship({\n        ref: 'Preset.groups', many: true, ui: {\n          displayMode: 'select',\n          labelField: 'title',\n        },\n      }),\n    }\n  }),\n\n  Media: list({\n    access: allowAll,\n    fields: {\n      content: relationship({\n        ref: 'Content.media', many: true,\n        ui: {\n          displayMode: 'select',\n          labelField: 'note',\n        },\n      }),\n      text: text({ defaultValue: '' }),\n      file: file({ storage: 'my_files' }),\n      image: image({ storage: 'my_images' }),\n      url: text({ defaultValue: '' }),\n      type: select({\n        type: 'enum',\n        options: [\n          { label: 'Onomatopoeia', value: 'onomatopoeia' },\n          { label: 'Image', value: 'image' },\n          { label: 'Audio', value: 'audio' },\n          { label: 'Video', value: 'video' },\n          { label: 'Score', value: 'score' },\n          { label: 'SVG', value: 'svg' },\n          { label: 'Text', value: 'text' },\n        ],\n        defaultValue: 'onomatopoeia',\n        db: { map: 'media_type' },\n        validation: { isRequired: true, },\n        isIndexed: 'unique',\n        ui: { displayMode: 'select' },\n      })\n    },\n\n    graphql: {\n      plural: 'Medias'\n    },\n  }),\n\n  Session: list({\n    access: allowAll,\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n      slug: text({ validation: { isRequired: true }, isIndexed: 'unique' }),\n      session_json: json({\n        defaultValue: null,\n        db: { map: 'session_json' },\n      }),\n      presets: relationship({ ref: 'Preset.sessions', many: true }),\n      author: relationship({\n        ref: 'User.sessions',\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n        many: false,\n      }),\n      tags: relationship({\n        ref: 'Tag.sessions',\n        many: true,\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name'],\n          inlineEdit: { fields: ['name'] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: ['name'] },\n        },\n      }),\n    },\n  }),\n\n  Tag: list({\n    access: allowAll,\n    ui: {\n      isHidden: true,\n    },\n    fields: {\n      name: text(),\n      presets: relationship({ ref: 'Preset.tags', many: true }),\n      sessions: relationship({ ref: 'Session.tags', many: true }),\n    },\n  }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core"]
}
