# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  presets(where: PresetWhereInput! = {}, orderBy: [PresetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PresetWhereUniqueInput): [Preset!]
  presetsCount(where: PresetWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  sessions: SessionManyRelationFilter
  presets: PresetManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SessionManyRelationFilter {
  every: SessionWhereInput
  some: SessionWhereInput
  none: SessionWhereInput
}

input PresetManyRelationFilter {
  every: PresetWhereInput
  some: PresetWhereInput
  none: PresetWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  sessions: SessionRelateToManyForUpdateInput
  presets: PresetRelateToManyForUpdateInput
  createdAt: DateTime
}

input SessionRelateToManyForUpdateInput {
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input PresetRelateToManyForUpdateInput {
  disconnect: [PresetWhereUniqueInput!]
  set: [PresetWhereUniqueInput!]
  create: [PresetCreateInput!]
  connect: [PresetWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  sessions: SessionRelateToManyForCreateInput
  presets: PresetRelateToManyForCreateInput
  createdAt: DateTime
}

input SessionRelateToManyForCreateInput {
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input PresetRelateToManyForCreateInput {
  create: [PresetCreateInput!]
  connect: [PresetWhereUniqueInput!]
}

type Session {
  id: ID!
  title: String
  slug: String
  session_json: JSON
  presets(where: PresetWhereInput! = {}, orderBy: [PresetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PresetWhereUniqueInput): [Preset!]
  presetsCount(where: PresetWhereInput! = {}): Int
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input SessionWhereUniqueInput {
  id: ID
  slug: String
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  presets: PresetManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input SessionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
}

input SessionUpdateInput {
  title: String
  slug: String
  session_json: JSON
  presets: PresetRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input SessionUpdateArgs {
  where: SessionWhereUniqueInput!
  data: SessionUpdateInput!
}

input SessionCreateInput {
  title: String
  slug: String
  session_json: JSON
  presets: PresetRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Preset {
  id: ID!
  title: String
  slug: String
  preset_json: JSON
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  groupsCount(where: GroupWhereInput! = {}): Int
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input PresetWhereUniqueInput {
  id: ID
  slug: String
}

input PresetWhereInput {
  AND: [PresetWhereInput!]
  OR: [PresetWhereInput!]
  NOT: [PresetWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  sessions: SessionManyRelationFilter
  groups: GroupManyRelationFilter
  contents: ContentManyRelationFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input GroupManyRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input ContentManyRelationFilter {
  every: ContentWhereInput
  some: ContentWhereInput
  none: ContentWhereInput
}

input PresetOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
}

input PresetUpdateInput {
  title: String
  slug: String
  preset_json: JSON
  sessions: SessionRelateToManyForUpdateInput
  groups: GroupRelateToManyForUpdateInput
  contents: ContentRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input GroupRelateToManyForUpdateInput {
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input ContentRelateToManyForUpdateInput {
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

input PresetUpdateArgs {
  where: PresetWhereUniqueInput!
  data: PresetUpdateInput!
}

input PresetCreateInput {
  title: String
  slug: String
  preset_json: JSON
  sessions: SessionRelateToManyForCreateInput
  groups: GroupRelateToManyForCreateInput
  contents: ContentRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input GroupRelateToManyForCreateInput {
  create: [GroupCreateInput!]
  connect: [GroupWhereUniqueInput!]
}

input ContentRelateToManyForCreateInput {
  create: [ContentCreateInput!]
  connect: [ContentWhereUniqueInput!]
}

type Content {
  id: ID!
  note: Int
  presets(where: PresetWhereInput! = {}, orderBy: [PresetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PresetWhereUniqueInput): [Preset!]
  presetsCount(where: PresetWhereInput! = {}): Int
  media: Media
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  note: IntFilter
  presets: PresetManyRelationFilter
  media: MediaWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ContentOrderByInput {
  id: OrderDirection
  note: OrderDirection
}

input ContentUpdateInput {
  note: Int
  presets: PresetRelateToManyForUpdateInput
  media: MediaRelateToOneForUpdateInput
}

input MediaRelateToOneForUpdateInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
  disconnect: Boolean
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  note: Int
  presets: PresetRelateToManyForCreateInput
  media: MediaRelateToOneForCreateInput
}

input MediaRelateToOneForCreateInput {
  create: MediaCreateInput
  connect: MediaWhereUniqueInput
}

type Media {
  id: ID!
  content(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentCount(where: ContentWhereInput! = {}): Int
  text: String
  file: FileFieldOutput
  image: ImageFieldOutput
  url: String
  type: MediaTypeType
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum MediaTypeType {
  onomatopoeia
  image
  audio
  video
  score
  svg
  text
}

input MediaWhereUniqueInput {
  id: ID
  type: MediaTypeType
}

input MediaWhereInput {
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
  id: IDFilter
  content: ContentManyRelationFilter
  text: StringFilter
  url: StringFilter
  type: MediaTypeTypeNullableFilter
}

input MediaTypeTypeNullableFilter {
  equals: MediaTypeType
  in: [MediaTypeType!]
  notIn: [MediaTypeType!]
  not: MediaTypeTypeNullableFilter
}

input MediaOrderByInput {
  id: OrderDirection
  text: OrderDirection
  url: OrderDirection
  type: OrderDirection
}

input MediaUpdateInput {
  content: ContentRelateToManyForUpdateInput
  text: String
  file: FileFieldInput
  image: ImageFieldInput
  url: String
  type: MediaTypeType
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageFieldInput {
  upload: Upload!
}

input MediaUpdateArgs {
  where: MediaWhereUniqueInput!
  data: MediaUpdateInput!
}

input MediaCreateInput {
  content: ContentRelateToManyForCreateInput
  text: String
  file: FileFieldInput
  image: ImageFieldInput
  url: String
  type: MediaTypeType
}

type Group {
  id: ID!
  name: String
  channel: Int
  presets(where: PresetWhereInput! = {}, orderBy: [PresetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PresetWhereUniqueInput): [Preset!]
  presetsCount(where: PresetWhereInput! = {}): Int
}

input GroupWhereUniqueInput {
  id: ID
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  channel: IntFilter
  presets: PresetManyRelationFilter
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  channel: OrderDirection
}

input GroupUpdateInput {
  name: String
  channel: Int
  presets: PresetRelateToManyForUpdateInput
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  channel: Int
  presets: PresetRelateToManyForCreateInput
}

type Tag {
  id: ID!
  name: String
  presets(where: PresetWhereInput! = {}, orderBy: [PresetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PresetWhereUniqueInput): [Preset!]
  presetsCount(where: PresetWhereInput! = {}): Int
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  presets: PresetManyRelationFilter
  sessions: SessionManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  presets: PresetRelateToManyForUpdateInput
  sessions: SessionRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  presets: PresetRelateToManyForCreateInput
  sessions: SessionRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSession(data: SessionCreateInput!): Session
  createSessions(data: [SessionCreateInput!]!): [Session]
  updateSession(where: SessionWhereUniqueInput!, data: SessionUpdateInput!): Session
  updateSessions(data: [SessionUpdateArgs!]!): [Session]
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessions(where: [SessionWhereUniqueInput!]!): [Session]
  createPreset(data: PresetCreateInput!): Preset
  createPresets(data: [PresetCreateInput!]!): [Preset]
  updatePreset(where: PresetWhereUniqueInput!, data: PresetUpdateInput!): Preset
  updatePresets(data: [PresetUpdateArgs!]!): [Preset]
  deletePreset(where: PresetWhereUniqueInput!): Preset
  deletePresets(where: [PresetWhereUniqueInput!]!): [Preset]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createMedia(data: MediaCreateInput!): Media
  createMedias(data: [MediaCreateInput!]!): [Media]
  updateMedia(where: MediaWhereUniqueInput!, data: MediaUpdateInput!): Media
  updateMedias(data: [MediaUpdateArgs!]!): [Media]
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteMedias(where: [MediaWhereUniqueInput!]!): [Media]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  session(where: SessionWhereUniqueInput!): Session
  sessionsCount(where: SessionWhereInput! = {}): Int
  presets(where: PresetWhereInput! = {}, orderBy: [PresetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PresetWhereUniqueInput): [Preset!]
  preset(where: PresetWhereUniqueInput!): Preset
  presetsCount(where: PresetWhereInput! = {}): Int
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  medias(where: MediaWhereInput! = {}, orderBy: [MediaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaWhereUniqueInput): [Media!]
  media(where: MediaWhereUniqueInput!): Media
  mediasCount(where: MediaWhereInput! = {}): Int
  groups(where: GroupWhereInput! = {}, orderBy: [GroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupWhereUniqueInput): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
